"""
Card prediction logic for Joker's Telegram Bot - simplified for webhook deployment
"""

import re
import logging
from datetime import datetime
from typing import Optional, Dict, List, Tuple

logger = logging.getLogger(__name__)

# Configuration constants
VALID_CARD_COMBINATIONS = [
    "‚ô†Ô∏è‚ô•Ô∏è‚ô¶Ô∏è", "‚ô†Ô∏è‚ô•Ô∏è‚ô£Ô∏è", "‚ô†Ô∏è‚ô¶Ô∏è‚ô£Ô∏è", "‚ô•Ô∏è‚ô¶Ô∏è‚ô£Ô∏è"
]

CARD_SYMBOLS = ["‚ô†Ô∏è", "‚ô•Ô∏è", "‚ô¶Ô∏è", "‚ô£Ô∏è", "‚ù§Ô∏è"]  # Include both ‚ô•Ô∏è and ‚ù§Ô∏è variants

PREDICTION_MESSAGE = "üîµ{numero} üîµ3K: statut :‚è≥"

class CardPredictor:
    """Handles card prediction logic for webhook deployment"""
    
    def __init__(self):
        self.predictions = {}  # Store predictions for verification
        self.processed_messages = set()  # Avoid duplicate processing
        self.sent_predictions = {}  # Store sent prediction messages for editing
        self.temporary_messages = {}  # Store temporary messages waiting for final edit
        self.pending_edits = {}  # Store messages waiting for edit with indicators
        
    def reset_predictions(self):
        """Reset all prediction states - useful for recalibration"""
        self.predictions.clear()
        self.processed_messages.clear()
        self.sent_predictions.clear()
        self.temporary_messages.clear()
        self.pending_edits.clear()
        logger.info("üîÑ Syst√®me de pr√©dictions r√©initialis√©")
    
    def extract_game_number(self, message: str) -> Optional[int]:
        """Extract game number from message like #n744 or #N744"""
        pattern = r'#[nN](\d+)'
        match = re.search(pattern, message)
        if match:
            return int(match.group(1))
        return None
    
    def has_pending_indicators(self, text: str) -> bool:
        """Check if message contains indicators suggesting it will be edited"""
        indicators = ['‚è∞', '‚ñ∂', 'üïê', '‚û°Ô∏è']
        return any(indicator in text for indicator in indicators)
    
    def has_completion_indicators(self, text: str) -> bool:
        """Check if message contains completion indicators after edit"""
        completion_indicators = ['‚úÖ', 'üî∞']
        return any(indicator in text for indicator in completion_indicators)
    
    def should_predict(self, message: str) -> Tuple[bool, Optional[int], Optional[str]]:
        """
        SYST√àME DE PR√âDICTION - D√©termine si on doit faire une NOUVELLE pr√©diction (+1)
        Returns: (should_predict, game_number, card_combination)
        """
        # Extract game number
        game_number = self.extract_game_number(message)
        if not game_number:
            return False, None, None
        
        logger.debug(f"üîÆ PR√âDICTION - Analyse du jeu {game_number}")
        
        # Skip if we already have a prediction for this exact next game number
        next_game = game_number + 1
        if next_game in self.predictions and self.predictions[next_game].get('status') == 'pending':
            logger.info(f"üîÆ Jeu {game_number}: Pr√©diction N{next_game} d√©j√† existante, √©viter doublon")
            return False, None, None
        
        # Check if this is a final message (has completion indicators)
        if self.has_completion_indicators(message):
            logger.info(f"üîÆ Jeu {game_number}: Message final d√©tect√© (‚úÖ ou üî∞)")
        
        # Extract card symbols from each parentheses section
        parentheses_sections = self.extract_card_symbols_from_parentheses(message)
        if not parentheses_sections:
            logger.info(f"üîÆ Jeu {game_number}: Aucune parenth√®se trouv√©e")
            return False, None, None
        
        # SYST√àME DE PR√âDICTION: Check if ANY parentheses section has exactly 3 different costumes
        for i, section_symbols in enumerate(parentheses_sections):
            if len(section_symbols) == 3:
                # Found a section with 3 different costumes - GENERATE PREDICTION FOR NEXT GAME
                combination = ''.join(sorted(section_symbols))
                logger.info(f"üîÆ PR√âDICTION - Jeu {game_number}: ‚úÖ 3 costumes trouv√©s dans parenth√®se {i+1}: {section_symbols}")
                logger.info(f"üîÆ R√àGLE PR√âDICTION RESPECT√âE: N'importe quelle parenth√®se avec 3 costumes ‚Üí g√©n√®re pr√©diction pour jeu {game_number + 1}")
                
                # Prevent duplicate processing avec optimisation
                message_hash = hash(message)
                if message_hash not in self.processed_messages:
                    self.processed_messages.add(message_hash)
                    logger.info(f"üîÆ PR√âDICTION - Jeu {game_number}: G√âN√âRATION RAPIDE")
                    return True, game_number, combination
                else:
                    logger.info(f"üîÆ PR√âDICTION - Jeu {game_number}: ‚ö†Ô∏è D√©j√† trait√©")
                    return False, None, None
            else:
                logger.info(f"üîÆ PR√âDICTION - Jeu {game_number}: Parenth√®se {i+1} a {len(section_symbols)} costumes: {section_symbols}")
        
        logger.info(f"üîÆ PR√âDICTION - Jeu {game_number}: R√àGLE NON RESPECT√âE - Aucune parenth√®se avec 3 costumes. Sections: {parentheses_sections}")
        return False, None, None
    
    def verify_prediction_from_edit(self, message: str) -> Optional[Dict]:
        """Verify if a prediction was correct from edited message (enhanced verification)"""
        return self._verify_prediction_common(message, is_edited=True)
    
    def _verify_prediction_common(self, message: str, is_edited: bool = False) -> Optional[Dict]:
        """Common verification logic - ONLY VERIFIES on EDITED messages, checks FIRST parentheses only"""
        game_number = self.extract_game_number(message)
        if not game_number:
            return None
        
        logger.info(f"üîç V√âRIFICATION SEULEMENT - Jeu {game_number} (√©dit√©: {is_edited})")
        
        # V√©rifier TOUTES les pr√©dictions en attente, priorit√© au jeu exact puis s√©quentiellement
        predictions_to_check = []
        
        # Synchroniser sent_predictions avec predictions
        for predicted_game, message_info in self.sent_predictions.items():
            if predicted_game not in self.predictions:
                self.predictions[predicted_game] = {
                    'status': 'pending',
                    'message_info': message_info
                }
            predictions_to_check.append(predicted_game)
        
        # Ajouter pr√©dictions existantes
        for predicted_game in self.predictions.keys():
            if predicted_game not in predictions_to_check:
                predictions_to_check.append(predicted_game)
        
        # Trier par ordre de priorit√© : jeu exact d'abord, puis s√©quentiel
        predictions_to_check = sorted(predictions_to_check)
        
        # V√âRIFICATION S√âQUENTIELLE - Continue jusqu'√† trouver une correspondance
        for predicted_game in predictions_to_check:
            prediction = self.predictions.get(predicted_game, {})
            prediction_status = prediction.get('status', 'pending')
            
            # Passer les pr√©dictions d√©j√† trait√©es
            if prediction_status != 'pending':
                continue
                
            verification_offset = game_number - predicted_game
            logger.info(f"üîç V√©rification pr√©diction {predicted_game} vs jeu actuel {game_number}, d√©calage: {verification_offset}")
            
            # V√âRIFICATION DANS LA FEN√äTRE 0-3 (jeu exact, +1, +2, +3)
            if 0 <= verification_offset <= 3:
                has_success_symbol = '‚úÖ' in message or 'üî∞' in message
                logger.info(f"üîç V√âRIFICATION - Jeu {game_number}: Symbole succ√®s: {has_success_symbol}, √âdit√©: {is_edited}")
                
                # SYST√àME DE V√âRIFICATION: SEULEMENT sur messages √©dit√©s avec symbole succ√®s
                if has_success_symbol and is_edited:
                    # R√àGLE CRITIQUE: V√©rifier UNIQUEMENT le PREMIER parenth√®se pour exactement 3 CARTES (pas costumes)
                    first_parentheses_card_count = self.count_cards_in_first_parentheses(message)
                    first_parentheses_valid = first_parentheses_card_count == 3
                    
                    logger.info(f"üîç PREMIER parenth√®se: {first_parentheses_card_count} cartes au total")
                    
                    if first_parentheses_valid:
                        # Succ√®s trouv√© - d√©terminer le statut selon le d√©calage
                        status_map = {0: '‚úÖ0Ô∏è‚É£', 1: '‚úÖ1Ô∏è‚É£', 2: '‚úÖ2Ô∏è‚É£', 3: '‚úÖ3Ô∏è‚É£'}
                        new_status = status_map[verification_offset]
                        
                        logger.info(f"üîç ‚úÖ V√âRIFICATION R√âUSSIE - PREMIER parenth√®se a exactement 3 cartes")
                        logger.info(f"üîç R√àGLE V√âRIFICATION RESPECT√âE: Pr√©diction {predicted_game} trouv√©e au jeu {game_number} (d√©calage {verification_offset}) ‚Üí {new_status}")
                        
                        original_message = f"üîµ{predicted_game} üîµ3K: statut :‚è≥"
                        updated_message = f"üîµ{predicted_game} üîµ3K: statut :{new_status}"
                        
                        prediction['status'] = 'correct'
                        prediction['verification_count'] = verification_offset
                        prediction['final_message'] = updated_message
                        
                        return {
                            'type': 'update_message',
                            'predicted_game': predicted_game,
                            'new_message': updated_message,
                            'original_message': original_message
                        }
            
            # V√©rifier si on doit marquer comme √©chec apr√®s 4 jeux
            elif verification_offset >= 4:
                # Apr√®s 4 jeux (0,1,2,3) sans succ√®s, marquer comme √©chec
                original_message = f"üîµ{predicted_game} üîµ3K: statut :‚è≥"
                updated_message = f"üîµ{predicted_game} üîµ3K: statut :‚≠ï‚≠ï"
                
                prediction['status'] = 'failed'
                prediction['final_message'] = updated_message
                
                return {
                    'type': 'update_message',
                    'predicted_game': predicted_game,
                    'new_message': updated_message,
                    'original_message': original_message
                }
        
        return None

# Global instance
card_predictor = CardPredictor()
