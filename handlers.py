"""
Event handlers for the Telegram bot - adapted for webhook deployment
"""

import logging
import os
from datetime import datetime, timedelta
from collections import defaultdict
from typing import Dict, Any

logger = logging.getLogger(__name__)

# Rate limiting storage
user_message_counts = defaultdict(list)

# Target channel ID for Baccarat Kouam√©
TARGET_CHANNEL_ID = -1002682552255

# Configuration constants
GREETING_MESSAGE = """
üé≠ Salut ! Je suis le bot de Joker !
Ajoutez-moi √† votre canal pour que je puisse saluer tout le monde ! üëã

üîÆ Je peux analyser les combinaisons de cartes et faire des pr√©dictions !
Utilisez /help pour voir toutes mes commandes.
"""

WELCOME_MESSAGE = """
üé≠ Bienvenue dans le monde de Joker ! 

üéØ Commandes disponibles :
/start - Accueil
/help - Aide d√©taill√©e  
/about - √Ä propos du bot
/dev - Informations d√©veloppeur
/deploy - Obtenir le fichier de d√©ploiement

üîÆ Fonctionnalit√©s sp√©ciales :
- Pr√©dictions de cartes automatiques
- Analyse des combinaisons
- Gestion des canaux et groupes
"""

HELP_MESSAGE = """
üéØ Guide d'utilisation du Bot Joker :

üìù Commandes de base :
/start - Message d'accueil
/help - Afficher cette aide
/about - Informations sur le bot
/dev - Contact d√©veloppeur

üîÆ Fonctionnalit√©s avanc√©es :
- Le bot analyse automatiquement les messages contenant des combinaisons de cartes
- Il fait des pr√©dictions bas√©es sur les patterns d√©tect√©s
- Gestion intelligente des messages √©dit√©s
- Support des canaux et groupes

üé¥ Format des cartes :
Le bot reconna√Æt les symboles : ‚ô†Ô∏è ‚ô•Ô∏è ‚ô¶Ô∏è ‚ô£Ô∏è

üìä Le bot peut traiter les messages avec format #nXXX pour identifier les jeux.
"""

ABOUT_MESSAGE = """
üé≠ Bot Joker - Pr√©dicteur de Cartes

ü§ñ Version : 2.0
üõ†Ô∏è D√©velopp√© avec Python et l'API Telegram
üîÆ Sp√©cialis√© dans l'analyse de combinaisons de cartes

‚ú® Fonctionnalit√©s :
- Pr√©dictions automatiques
- Analyse de patterns
- Support multi-canaux
- Interface intuitive

üåü Cr√©√© pour am√©liorer votre exp√©rience de jeu !
"""

DEV_MESSAGE = """
üë®‚Äçüíª Informations D√©veloppeur :

üîß Technologies utilis√©es :
- Python 3.11+
- API Telegram Bot
- Flask pour les webhooks
- D√©ploy√© sur Render.com

üìß Contact : 
Pour le support technique ou les suggestions d'am√©lioration, 
contactez l'administrateur du bot.

üöÄ Le bot est open source et peut √™tre d√©ploy√© facilement !
"""

MAX_MESSAGES_PER_MINUTE = 30
RATE_LIMIT_WINDOW = 60

def is_rate_limited(user_id: int) -> bool:
    """Check if user is rate limited"""
    now = datetime.now()
    user_messages = user_message_counts[user_id]

    # Remove old messages outside the window
    user_messages[:] = [msg_time for msg_time in user_messages 
                       if now - msg_time < timedelta(seconds=RATE_LIMIT_WINDOW)]

    # Check if user exceeded limit
    if len(user_messages) >= MAX_MESSAGES_PER_MINUTE:
        return True

    # Add current message time
    user_messages.append(now)
    return False

class TelegramHandlers:
    """Handlers for Telegram bot using webhook approach"""
    
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.deployment_file_path = "deployment.zip"
        # Import card_predictor locally to avoid circular imports
        try:
            from card_predictor import card_predictor
            self.card_predictor = card_predictor
        except ImportError:
            logger.error("Failed to import card_predictor")
            self.card_predictor = None
        
    def handle_update(self, update: Dict[str, Any]) -> None:
        """Handle incoming Telegram update with enhanced webhook support"""
        try:
            if 'message' in update:
                message = update['message']
                logger.info(f"üîÑ Handlers - Traitement message normal")
                self._handle_message(message)
            elif 'edited_message' in update:
                message = update['edited_message']
                logger.info(f"üîÑ Handlers - Traitement message √©dit√© pour pr√©dictions/v√©rifications")
                self._handle_edited_message(message)
            else:
                logger.info(f"‚ö†Ô∏è Type d'update non g√©r√©: {list(update.keys())}")
                
        except Exception as e:
            logger.error(f"Error handling update: {e}")
                def _handle_edited_message(self, message: Dict[str, Any]) -> None:
        """Handle edited messages with enhanced webhook processing for predictions and verification"""
        try:
            chat_id = message['chat']['id']
            chat_type = message['chat'].get('type', 'private')
            user_id = message.get('from', {}).get('id')
            message_id = message.get('message_id')
            sender_chat = message.get('sender_chat', {})
            sender_chat_id = sender_chat.get('id')
            
            logger.info(f"‚úèÔ∏è WEBHOOK - Message √©dit√© re√ßu ID:{message_id} | Chat:{chat_id} | Sender:{sender_chat_id}")
            
            # Rate limiting check (skip for channels/groups)
            if user_id and chat_type == 'private' and is_rate_limited(user_id):
                return
            
            # Process edited messages
            if 'text' in message:
                text = message['text']
                logger.info(f"‚úèÔ∏è WEBHOOK - Contenu √©dit√©: {text[:100]}...")
                
                # Skip card prediction if card_predictor is not available
                if not self.card_predictor:
                    logger.warning("‚ùå Card predictor not available")
                    return
                
                # V√©rifier que c'est du canal autoris√©
                if sender_chat_id != TARGET_CHANNEL_ID:
                    logger.info(f"üö´ Message √©dit√© ignor√© - Canal non autoris√©: {sender_chat_id}")
                    return
                
                logger.info(f"‚úÖ WEBHOOK - Message √©dit√© du canal autoris√©: {TARGET_CHANNEL_ID}")
                
                # TRAITEMENT MESSAGES √âDIT√âS - Les deux syst√®mes fonctionnent ici
                if self.card_predictor.has_completion_indicators(text):
                    logger.info(f"üéØ √âDITION - Message finalis√© d√©tect√©, traitement des deux syst√®mes")
                    
                    # SYST√àME 1: PR√âDICTION AUTOMATIQUE (SEULEMENT sur messages √©dit√©s)
                    should_predict, game_number, combination = self.card_predictor.should_predict(text)
                    
                    if should_predict and game_number is not None and combination is not None:
                        prediction = self.card_predictor.make_prediction(game_number, combination)
                        logger.info(f"üîÆ PR√âDICTION depuis √âDITION: {prediction}")
                        
                        # Envoyer la pr√©diction et stocker pour futures v√©rifications
                        sent_message_info = self.send_message(chat_id, prediction)
                        if sent_message_info and isinstance(sent_message_info, dict) and 'message_id' in sent_message_info:
                            next_game = game_number + 1
                            self.card_predictor.sent_predictions[next_game] = {
                                'chat_id': chat_id,
                                'message_id': sent_message_info['message_id']
                            }
                            logger.info(f"üìù Pr√©diction stock√©e pour jeu {next_game}")
                    
                    # SYST√àME 2: V√âRIFICATION (SEULEMENT sur messages √©dit√©s)
                    verification_result = self.card_predictor.verify_prediction_from_edit(text)
                    if verification_result:
                        logger.info(f"üîç V√âRIFICATION depuis √âDITION: {verification_result}")
                        if verification_result['type'] == 'update_message':
                            # Essayer d'√©diter le message original de pr√©diction
                            predicted_game = verification_result['predicted_game']
                            if predicted_game in self.card_predictor.sent_predictions:
                                message_info = self.card_predictor.sent_predictions[predicted_game]
                                edit_success = self.edit_message(
                                    message_info['chat_id'],
                                    message_info['message_id'],
                                    verification_result['new_message']
                                )
                                if edit_success:
                                    logger.info(f"‚úÖ Message de pr√©diction √©dit√© pour jeu {predicted_game}")
                                else:
                                    self.send_message(chat_id, verification_result['new_message'])
                            else:
                                self.send_message(chat_id, verification_result['new_message'])
